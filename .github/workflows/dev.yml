name: Build & Deploy to ECS (DEV)

on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'

  pull_request:
    branches:
      - 'dev'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

  ECR_REPOSITORY: landing-page
  ECS_CLUSTER_DEV: frontends-dev
  ECS_SERVICE: landing-page-svc

  CONTAINER_NAME: landing-page

  ECS_TASK_DEFINITION: .aws/task-def.json

jobs:
  build_push:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Make pipeline fail
        run: |
          echo "This is a failing step"
          exit 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: satackey/action-docker-layer-caching@v0.0.11
        name: Setup Docker Layer Caching
        continue-on-error: true

      - name: Build, tag, and push image to Amazon ECR
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCESS_KEY_ID: ${{env.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{env.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{env.AWS_REGION}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION=$AWS_REGION .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        # if event is push
        if: github.event_name  == 'push'
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition to DEVELOPMENT
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        if: github.event_name  == 'push'
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER_DEV }}
          wait-for-service-stability: true

      - name: Actions Status Discord
        uses: sarisia/actions-status-discord@v1.9.0
        if: github.event_name  == 'push'
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 'Deployment to ${{ github.ref }}'
          description: 'Built and deployed landing page to ${{ github.ref }}'
          color: 0x0000ff

      - name: Actions Status Discord
        uses: sarisia/actions-status-discord@v1.9.0
        if: github.event_name  == 'pull_request'
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 'PR ${{ github.ref }} Built successfully'
          description: 'Built PR ${{ github.ref }}'
          color: 0x0000ff

  warn-discord:
    runs-on: ubuntu-20.04
    if: ${{ failure() }}
    steps:
      - name: Actions Status Discord
        uses: sarisia/actions-status-discord@v1.9.0
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 'Deployment to ${{ github.ref }} failed'
          description: 'Failed to deploy to ${{ github.ref }}'
          color: 0xff0000
